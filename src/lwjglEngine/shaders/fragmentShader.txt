#version 400 core

//in vec3 color;
in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 outColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectness;

void main(void)
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.2);
	vec3 diffuse = brightness * lightColor;

	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLight = reflect(lightDirection, unitNormal);
	
	float specular = dot(reflectedLight, unitToCameraVector);
	specular = max(specular, 0.0);
	float dampedFactor = pow(specular, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectness * lightColor;
	
	vec4 textureColor = texture(textureSampler, passTextureCoords);
	if (textureColor.a < 0.5) 
	{
		discard;
	}
	
	//outColor = vec4(color,1.0);
	//Linear interpolation of textures, by sampling the 2D texture by input coordinates
	outColor = vec4(diffuse,1.0) * texture(textureSampler, passTextureCoords) + vec4(finalSpecular, 1.0);
}
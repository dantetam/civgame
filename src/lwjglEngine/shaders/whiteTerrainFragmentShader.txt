#version 400 core

//in vec3 color;
in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 outColor;

uniform sampler2D backgroundTexture;
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform sampler2D texture4;
uniform sampler2D texture5;
uniform sampler2D texture6;
uniform sampler2D texture7;
uniform sampler2D blendMap;
uniform sampler2D blendMap2;

uniform vec2 selectedCoord;
uniform vec2 mouseHighlightedCoord;

uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectness;

void main(void)
{
	vec4 blendMapColor = texture(blendMap, passTextureCoords);
	vec4 totalColor;
	vec2 tiledCoords = passTextureCoords * 20.0;
		
	float v = blendMapColor.r;
	if (v < 0.02)
	{
		totalColor = texture(backgroundTexture, tiledCoords);
	}
	else if (v <= 1.0/8.0)
	{
	    totalColor = texture(texture1, tiledCoords);
	}
	else if (v <= 2.0/8.0)
	{
		totalColor = texture(texture2, tiledCoords);
	}
	else if (v <= 3.0/8.0)
	{
		totalColor = texture(texture3, tiledCoords);	
	}
	else if (v <= 4.0/8.0)
	{
		totalColor = texture(texture4, tiledCoords);	
	}
	else if (v <= 5.0/8.0)
	{
		totalColor = texture(texture5, tiledCoords);	
	}
	else if (v <= 6.0/8.0)
	{
		totalColor = texture(texture6, tiledCoords);	
	}
	else if (v <= 7.0/8.0)
	{
		totalColor = texture(texture7, tiledCoords);	
	}
	else
	{
		totalColor = texture(texture1, tiledCoords);	
	}
	
	/*
	vec4 highlightColor = texture(blendMap2, passTextureCoords);
	if (highlightColor.r > 0.02 || highlightColor.g > 0.02 || highlightColor.b > 0.02)
	{
		totalColor = highlightColor;
	}
	*/
	
	if (mouseHighlightedCoord.x > 0)
	{
		if (distance(mouseHighlightedCoord, passTextureCoords) < 0.015) 
		{
			totalColor = totalColor*0.6 + 0.4*vec4(1,1,1,0);
		}
	}
	if (selectedCoord.x > 0)
	{
		float radius = distance(selectedCoord, passTextureCoords);
		if (radius > 0.025 && radius < 0.045) 
		{
			totalColor = totalColor*0.4 + 0.7*vec4(1,1,1,0);
		}
	}
	
	//float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	//vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords)*backTextureAmount;
	//vec4 rTextureColor = texture(rTexture, tiledCoords)*blendMapColor.r;
	//vec4 gTextureColor = texture(gTexture, tiledCoords)*blendMapColor.g;
	//vec4 bTextureColor = texture(bTexture, tiledCoords)*blendMapColor.b;

	//vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.2);
	vec3 diffuse = brightness * lightColor;

	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLight = reflect(lightDirection, unitNormal);
	
	float specular = dot(reflectedLight, unitToCameraVector);
	specular = max(specular, 0.0);
	float dampedFactor = pow(specular, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectness * lightColor;

	//outColor = vec4(color,1.0);
	//Linear interpolation of textures, by sampling the 2D texture by input coordinates
	outColor = vec4(diffuse,1.0) * totalColor + vec4(finalSpecular, 1.0);
}